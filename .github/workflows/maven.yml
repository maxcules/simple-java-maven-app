name: Java CI with Maven

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Scan Maven dependencies with Trivy
      uses: aquasecurity/trivy-action@0.17.0
      with:
        scan-type: fs
        scan-ref: .
        scanners: vuln
        severity: CRITICAL,HIGH
        exit-code: 1

    - name: Bump Version
      id: bump
      uses: nnichols/maven-version-bump-action@v3

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Extract Version
      run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

    - name: Scan Dockerfile with Trivy
      uses: aquasecurity/trivy-action@v0.11.2
      with:
        scan-type: config
        scan-ref: .
        ignore-unfixed: true
        exit-code: '1'
        severity: CRITICAL,HIGH

    - name: Build Docker Image (Multi-Stage)
      run: |
        docker build --build-arg JAR_FILE=$(ls target/*.jar) -t app:${{ env.VERSION }} .
        docker tag app:${{ env.VERSION }} app:latest

    - name: Save Docker Image as Artifact
      run: |
        docker save app:${{ env.VERSION }} -o app-${{ env.VERSION }}.tar

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get Maven version
      id: maven-version
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        echo "SHORT_VERSION=$(echo $VERSION | cut -d'.' -f1-2)" >> $GITHUB_ENV

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.SHORT_VERSION }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        labels: |
          org.opencontainers.image.source=${{ github.repository_url }}


    - name: Install SSH Client
      run: sudo apt-get update && sudo apt-get install -y openssh-client

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > ~/.ssh/ec2_key
        chmod 600 ~/.ssh/ec2_key
        cat >> ~/.ssh/config <<EOF
        Host ec2
          HostName ${{ secrets.EC2_HOST }}
          User ${{ secrets.EC2_USER }}
          IdentityFile ~/.ssh/ec2_key
          StrictHostKeyChecking no
        EOF

    - name: Test Connection
      run: ssh -v ec2 "echo 'SSH connection successful!'"

    - name: Deploy Container
      run: |
        ssh -v ec2 /bin/bash <<'EOL'
        # --- Debugging info ---
        echo "EC2 Host: $(hostname)"
        echo "Docker version: $(docker --version)"
        echo "Current containers: $(docker ps -a)"

        # Login to GHCR
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin || echo "GHCR login failed"
        # Stop/remove old container
        docker stop myapp || true
        docker rm myapp || true

        # Pull new image and run
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
        docker run -d \
            --name myapp \
            -p 8080:8080 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
